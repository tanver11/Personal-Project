SELECT * FROM  `exam_data.exams`;

##Question-01=Actual Mark Calculation
SELECT
  es.user_id,
  e.exam_name,
  es.session_id,
  (es.total_correct_answers * e.each_ques_mark) - 
  (es.total_false_answers * e.per_ques_negative_marking) AS actual_mark
FROM
  `exam_data.exam_sessions` AS es
JOIN
  `exam_data.exams` AS e
ON
  es.exam_id = e.exam_id;



##Question-02=Pass/Fail Classification
SELECT
  es.user_id AS auth_user_id,
  e.exam_name,
  (es.total_correct_answers * e.each_ques_mark) - 
  (es.total_false_answers * e.per_ques_negative_marking) AS actual_mark,
  e.pass_mark,
  CASE
    WHEN (es.total_correct_answers * e.each_ques_mark) - 
         (es.total_false_answers * e.per_ques_negative_marking) >= e.pass_mark
    THEN 'Pass'
    ELSE 'Fail'
  END AS result_status
FROM
  `exam_data.exam_sessions` AS es
JOIN
  `exam_data.exams` AS e
ON
  es.exam_id = e.exam_id;





##Question-03=Top performers
SELECT
  e.exam_name,
  es.user_id AS auth_user_id,
  (es.total_correct_answers * e.each_ques_mark) - 
  (es.total_false_answers * e.per_ques_negative_marking) AS actual_mark,
  RANK() OVER (
    PARTITION BY e.exam_name
    ORDER BY 
      (es.total_correct_answers * e.each_ques_mark) - 
      (es.total_false_answers * e.per_ques_negative_marking) DESC
  ) AS rank
FROM
  `exam_data.exam_sessions` AS es
JOIN
  `exam_data.exams` AS e
ON
  es.exam_id = e.exam_id
QUALIFY RANK() OVER (
    PARTITION BY e.exam_name
    ORDER BY 
      (es.total_correct_answers * e.each_ques_mark) - 
      (es.total_false_answers * e.per_ques_negative_marking) DESC
  ) <= 5;




##Qyestion-04=Performance trend per student across exams
WITH marks_with_lag AS (
  SELECT
    es.user_id AS auth_user_id,
    e.exam_name,
    es.user_exam_starts_at,
    (es.total_correct_answers * e.each_ques_mark) - 
    (es.total_false_answers * e.per_ques_negative_marking) AS actual_mark,
    
    LAG(
      (es.total_correct_answers * e.each_ques_mark) - 
      (es.total_false_answers * e.per_ques_negative_marking)
    ) OVER (
      PARTITION BY es.user_id
      ORDER BY es.user_exam_starts_at
    ) AS previous_actual_mark

  FROM
    `exam_data.exam_sessions` AS es
  JOIN
    `exam_data.exams` AS e
  ON
    es.exam_id = e.exam_id
)

SELECT
  auth_user_id,
  exam_name,
  user_exam_starts_at,
  actual_mark,
  previous_actual_mark,
  CASE
    WHEN previous_actual_mark IS NULL THEN NULL
    WHEN actual_mark > previous_actual_mark THEN 'Improved'
    WHEN actual_mark < previous_actual_mark THEN 'Declined'
    WHEN actual_mark = previous_actual_mark THEN 'Same'
  END AS performance_trend
FROM
  marks_with_lag;
	

